# trigger: none # Disable CI triggers, but schedule/pipeline trigger still works.
trigger: # This is a CI trigger. Also got Schdeduled trigger (cron) and Pipeline dependency trigger (resources)
  batch: true # Squash all commits made while build is in progress
  branches:
    include:
      - master

pool:
  # name: 'Self Hosted' # need to install agent on my own laptop/server
  vmImage: "ubuntu-latest"

variables:
  - name: varName
    value: Kyouko
    readonly: true

stages: # A stage is like k8s Service, just a logic boundary. Its jobs runs one after another by default.
  - stage: Stage1
    # pool: 'Self Hosted' # Let all jobs run with same agent pool.
    jobs: # A job is like k8s Pod. All jobs run in the same place. # Deployment job is special, need to create environemnts in ADO panel first.
      - job: Job_simple
        displayName: "Run Job_simple"
        variables:
          jobLocalVar: Mami
        steps: # A step is like k8s Container. All steps run in a same Pod.
          # For variables, choose marco expression $(var) to provide input for task
          # choose runtime expression $[variables.var] for conditions/expressions
          # choose template expression ${{ variables.var }} when used in a template
          # use $var get from bash env, %var% for cmd, etc.
          - script: echo Hello $(varName) from $(jobLocalVar)!
            displayName: "$(varName) from $(jobLocalVar) step"
          # Manually store ${mySecret} in ADO pipeline vault and fetch with a mapped var
          - bash: |
              echo "Mahou shoujo's secret is: $env:MAPPED_ENV_VAR"
            displayName: "Secret step"
            env:
              MAPPED_ENV_VAR: ${mySecret}
      - job: Job_template
        displayName: "Run Job_template"
        steps:
          # According to docs, template is only for steps, stages, variables, jobs.
          # This template here replaces the entire "steps" parent.
          - template: templates/play-template.yml
            parameters:
              firstName: "Bad Kyubey"

  - stage: Stage2
    dependsOn: [] # Run in parallel, if there are more agents available
    # condition: succeeded('Stage1')
    jobs:
      - job: Job_task
        displayName: "Run Job_task"
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - script: which node
            displayName: "Check installed nodejs version"

  - stage: ValidationStage
    dependsOn: [Stage1, Stage2]
    jobs:
      - job: Job_Validation
        displayName: "Run Job_Validation"
        steps:
          - task: ManualValidation@0
            # target: pycontainer # Can specify
            # condition: succeededOrFailed() # Other options: always(runs even when canceled), canceled, failed, succeeded(default)
            # retryCountOnTaskFailure: 10
            enabled: false # Disabled for now
            timeoutInMinutes: 1
            inputs: # Inputs may not be available for other tasks.
              notifyUsers: ""
              instructions: "Yo pls validate"
              onTimeout: "reject"
